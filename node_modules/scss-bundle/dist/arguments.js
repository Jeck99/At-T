"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const Contracts = require("./contracts");
let verbosityValues = [];
for (let key in Contracts.Verbosity) {
    if (Number(key) % 1 !== 0) {
        verbosityValues.push(key);
    }
}
const DEDUPE_KEY = "dedupe";
exports.argv = yargs
    .help("h", "Show help.")
    .alias("h", "help")
    .version(() => {
    return `Current version: ${require("../package.json").version}.`;
})
    .alias("v", "version")
    .config("config")
    .alias("c", "config")
    .options("e", {
    alias: "entry",
    describe: "Entry file.",
    type: "string"
})
    .options("d", {
    alias: "dest",
    describe: "Bundled file destination.",
    type: "string"
})
    .options("verbosity", {
    describe: "Verbosity of output.",
    choices: verbosityValues,
    default: Contracts.Verbosity[Contracts.Verbosity.Verbose]
})
    .options("includePaths", {
    describe: "Include paths for resolving imports.",
    type: "array"
})
    .array(DEDUPE_KEY)
    .default(DEDUPE_KEY, [], "[]")
    .usage("Usage: scss-bundle [options]")
    .string(["c", "e", "d"])
    .argv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJndW1lbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FyZ3VtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUErQjtBQUUvQix5Q0FBeUM7QUFFekMsSUFBSSxlQUFlLEdBQWEsRUFBRSxDQUFDO0FBQ25DLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDO0FBRWpCLFFBQUEsSUFBSSxHQUFHLEtBQUs7S0FDbEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUM7S0FDdkIsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEIsT0FBTyxDQUFDO0lBQ0wsTUFBTSxDQUFDLG9CQUFvQixPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUNyRSxDQUFDLENBQUM7S0FDRCxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQztLQUNyQixNQUFNLENBQUMsUUFBUSxDQUFDO0tBQ2hCLEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDO0tBQ3BCLE9BQU8sQ0FBQyxHQUFHLEVBQUU7SUFDVixLQUFLLEVBQUUsT0FBTztJQUNkLFFBQVEsRUFBRSxhQUFhO0lBQ3ZCLElBQUksRUFBRSxRQUFRO0NBQ2pCLENBQUM7S0FDRCxPQUFPLENBQUMsR0FBRyxFQUFFO0lBQ1YsS0FBSyxFQUFFLE1BQU07SUFDYixRQUFRLEVBQUUsMkJBQTJCO0lBQ3JDLElBQUksRUFBRSxRQUFRO0NBQ2pCLENBQUM7S0FDRCxPQUFPLENBQUMsV0FBVyxFQUFFO0lBQ2xCLFFBQVEsRUFBRSxzQkFBc0I7SUFDaEMsT0FBTyxFQUFFLGVBQWU7SUFDeEIsT0FBTyxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7Q0FDNUQsQ0FBQztLQUNELE9BQU8sQ0FBQyxjQUFjLEVBQUU7SUFDckIsUUFBUSxFQUFFLHNDQUFzQztJQUNoRCxJQUFJLEVBQUUsT0FBTztDQUNoQixDQUFDO0tBQ0QsS0FBSyxDQUFDLFVBQVUsQ0FBQztLQUNqQixPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUM7S0FDN0IsS0FBSyxDQUFDLDhCQUE4QixDQUFDO0tBQ3JDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDdkIsSUFBaUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHlhcmdzIGZyb20gXCJ5YXJnc1wiO1xyXG5cclxuaW1wb3J0ICogYXMgQ29udHJhY3RzIGZyb20gXCIuL2NvbnRyYWN0c1wiO1xyXG5cclxubGV0IHZlcmJvc2l0eVZhbHVlczogc3RyaW5nW10gPSBbXTtcclxuZm9yIChsZXQga2V5IGluIENvbnRyYWN0cy5WZXJib3NpdHkpIHtcclxuICAgIGlmIChOdW1iZXIoa2V5KSAlIDEgIT09IDApIHtcclxuICAgICAgICB2ZXJib3NpdHlWYWx1ZXMucHVzaChrZXkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBERURVUEVfS0VZID0gXCJkZWR1cGVcIjtcclxuXHJcbmV4cG9ydCBsZXQgYXJndiA9IHlhcmdzXHJcbiAgICAuaGVscChcImhcIiwgXCJTaG93IGhlbHAuXCIpXHJcbiAgICAuYWxpYXMoXCJoXCIsIFwiaGVscFwiKVxyXG4gICAgLnZlcnNpb24oKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBgQ3VycmVudCB2ZXJzaW9uOiAke3JlcXVpcmUoXCIuLi9wYWNrYWdlLmpzb25cIikudmVyc2lvbn0uYDtcclxuICAgIH0pXHJcbiAgICAuYWxpYXMoXCJ2XCIsIFwidmVyc2lvblwiKVxyXG4gICAgLmNvbmZpZyhcImNvbmZpZ1wiKVxyXG4gICAgLmFsaWFzKFwiY1wiLCBcImNvbmZpZ1wiKVxyXG4gICAgLm9wdGlvbnMoXCJlXCIsIHtcclxuICAgICAgICBhbGlhczogXCJlbnRyeVwiLFxyXG4gICAgICAgIGRlc2NyaWJlOiBcIkVudHJ5IGZpbGUuXCIsXHJcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgfSlcclxuICAgIC5vcHRpb25zKFwiZFwiLCB7XHJcbiAgICAgICAgYWxpYXM6IFwiZGVzdFwiLFxyXG4gICAgICAgIGRlc2NyaWJlOiBcIkJ1bmRsZWQgZmlsZSBkZXN0aW5hdGlvbi5cIixcclxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICB9KVxyXG4gICAgLm9wdGlvbnMoXCJ2ZXJib3NpdHlcIiwge1xyXG4gICAgICAgIGRlc2NyaWJlOiBcIlZlcmJvc2l0eSBvZiBvdXRwdXQuXCIsXHJcbiAgICAgICAgY2hvaWNlczogdmVyYm9zaXR5VmFsdWVzLFxyXG4gICAgICAgIGRlZmF1bHQ6IENvbnRyYWN0cy5WZXJib3NpdHlbQ29udHJhY3RzLlZlcmJvc2l0eS5WZXJib3NlXVxyXG4gICAgfSlcclxuICAgIC5vcHRpb25zKFwiaW5jbHVkZVBhdGhzXCIsIHtcclxuICAgICAgICBkZXNjcmliZTogXCJJbmNsdWRlIHBhdGhzIGZvciByZXNvbHZpbmcgaW1wb3J0cy5cIixcclxuICAgICAgICB0eXBlOiBcImFycmF5XCJcclxuICAgIH0pXHJcbiAgICAuYXJyYXkoREVEVVBFX0tFWSlcclxuICAgIC5kZWZhdWx0KERFRFVQRV9LRVksIFtdLCBcIltdXCIpXHJcbiAgICAudXNhZ2UoXCJVc2FnZTogc2Nzcy1idW5kbGUgW29wdGlvbnNdXCIpXHJcbiAgICAuc3RyaW5nKFtcImNcIiwgXCJlXCIsIFwiZFwiXSlcclxuICAgIC5hcmd2IGFzIENvbnRyYWN0cy5Bcmd1bWVudHNWYWx1ZXM7XHJcbiJdfQ==